version: '3'

services:
  # Generates random log data for consumption by the custom Agent check
  log_generator:
    image: docker.io/mingrammer/flog
    depends_on:
      - datadog-agent-vector
      - datadog-agent
    command:
      - "-f"
      - "json"
      - "-n"
      - "1000"
      - "-t"
      - "log"
      - "-o"
      - "/var/log/a_custom.log"
    volumes:
      - log_path:/var/log/

  # Tails a custom log created by `log_generator` and sends log data to
  # the `fakeintake-agent` service
  datadog-agent:
    image: docker.io/datadog/agent:${CONFIG_AGENT_VERSION}
    depends_on:
      - fakeintake-agent
    environment:
    - DD_API_KEY=${TEST_DATADOG_API_KEY:?TEST_DATADOG_API_KEY required}
    - DD_HOSTNAME=datadog-agent
    - DD_ENABLE_PAYLOADS_EVENTS=false
    - DD_ENABLE_PAYLOADS_SERVICE_CHECKS=false
    - DD_CONTAINER_EXCLUDE="name:.*"
    volumes:
    # The Agent config file
    - ${PWD}/tests/data/e2e/datadog/logs/agent_only.yaml:/etc/datadog-agent/datadog.yaml
    # The custom logs check
    - ${PWD}/tests/data/e2e/datadog/logs/logs.conf.d:/conf.d:ro
    # The custom log to tail, created by the `log_generator` service
    - log_path:/var/log/

  # Tails a custom log created by `log_generator` and sends log data to
  # the `vector` service
  datadog-agent-vector:
    image: docker.io/datadog/agent:${CONFIG_AGENT_VERSION}
    depends_on:
      - vector
    environment:
    - DD_API_KEY=${TEST_DATADOG_API_KEY:?TEST_DATADOG_API_KEY required}
    - DD_HOSTNAME=datadog-agent-vector
    - DD_ENABLE_PAYLOADS_EVENTS=false
    - DD_ENABLE_PAYLOADS_SERVICE_CHECKS=false
    - DD_CONTAINER_EXCLUDE="name:.*"
    volumes:
    # The Agent config file
    - ${PWD}/tests/data/e2e/datadog/logs/agent_vector.yaml:/etc/datadog-agent/datadog.yaml
    # The custom logs check
    - ${PWD}/tests/data/e2e/datadog/logs/logs.conf.d:/conf.d:ro
    # The custom log to tail, created by the `log_generator` service
    - log_path:/var/log/

  # Receives log data from the `datadog-agent-vector` service and sends
  # to the `fakeintake-vector` service.
  vector:
    depends_on:
      - fakeintake-vector
    build:
      context: ${PWD}
    # re-using the integration test runner image since it already has
    # compiled vector on it.
    image: ${CONFIG_VECTOR_IMAGE}
    environment:
      - FEATURES=e2e-tests-datadog
    working_dir: /home/vector
    network_mode: host
    command:
      - "/usr/bin/vector"
      - "-vvv"
      - "-c"
      - "/home/vector/tests/data/e2e/datadog/logs/vector.toml"
    volumes:
      - ${PWD}:/home/vector

  # Receives log data from the `datadog-agent` service. Is queried by the test runner
  # which does the validation of consistency with the other fakeintake service.
  fakeintake-agent:
    # TODO: temporarily pegging the image as latest results in failures
    image: docker.io/datadog/fakeintake:v77a06f2b

  # Receives log data from the `datadog-agent-vector` service. Is queried by the test runner
  # which does the validation of consistency with the other fakeintake service.
  fakeintake-vector:
    # TODO: temporarily pegging the image as latest results in failures
    image: docker.io/datadog/fakeintake:v77a06f2b

networks:
  default:
    name: ${VECTOR_NETWORK}

volumes:
  log_path: {}
  target: {}
