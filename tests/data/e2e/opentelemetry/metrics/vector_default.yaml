sources:
  source0:
    type: opentelemetry
    grpc:
      address: 0.0.0.0:4317
    http:
      address: 0.0.0.0:4318
      keepalive:
        max_connection_age_jitter_factor: 0.1
        max_connection_age_secs: 300

  internal_metrics:
    type: internal_metrics
    scrape_interval_secs: 60

transforms:
  remap_otel:
    type: remap
    inputs:
      - source0.metrics
    source: |
      # Convert Vector's internal metric representation to OTLP JSON format
      metric_type = .kind

      # Build the data point based on metric type
      data_point = {
        "timeUnixNano": to_string(to_unix_timestamp!(.timestamp, unit: "nanoseconds")),
        "attributes": []
      }

      # Add value based on metric kind
      if metric_type == "incremental" || metric_type == "absolute" {
        if is_float(.value) {
          data_point.asDouble = .value
        } else {
          data_point.asInt = to_string(.value)
        }
      }

      # Build the metric structure
      metric_data = {}
      if metric_type == "incremental" || metric_type == "absolute" {
        metric_data.sum = {
          "dataPoints": [data_point],
          "aggregationTemporality": if metric_type == "incremental" { 1 } else { 2 },
          "isMonotonic": true
        }
      } else {
        metric_data.gauge = {
          "dataPoints": [data_point]
        }
      }

      . = {
        "resourceMetrics": [
          {
            "resource": {
              "attributes": [
                { "key": "service.name", "value": { "stringValue": get!(.tags, ["service.name"]) ?? "telemetrygen" } }
              ]
            },
            "scopeMetrics": [
              {
                "scope": {
                  "name": "telemetrygen"
                },
                "metrics": [
                  merge!({"name": .name, "unit": ""}, metric_data)
                ]
              }
            ]
          }
        ]
      }


sinks:
  otel_sink:
    inputs: [ "remap_otel" ]
    type: opentelemetry
    protocol:
      type: http
      uri: http://otel-collector-sink:5318/v1/metrics
      method: post
      encoding:
        codec: json
      framing:
        method: newline_delimited
      batch:
        max_events: 1
      request:
        headers:
          content-type: application/json

  otel_file_sink:
    type: file
    path: "/output/opentelemetry-metrics/vector-file-sink.log"
    inputs:
      - remap_otel
    encoding:
      codec: json

  metrics_file_sink:
    type: file
    path: "/output/opentelemetry-metrics/vector-internal-metrics-sink.log"
    inputs:
      - internal_metrics
    encoding:
      codec: json
