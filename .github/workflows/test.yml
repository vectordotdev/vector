name: Test Suite

on:
  pull_request:
  merge_group:
    types: [checks_requested]

concurrency:
  # `github.ref` is unique for MQ runs and PRs
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CONTAINER_TOOL: "docker"
  DD_ENV: "ci"
  DD_API_KEY: ${{ secrets.DD_API_KEY }}
  RUST_BACKTRACE: full
  TEST_LOG: vector=debug
  VERBOSE: true
  CI: true
  PROFILE: debug
  # observing issues fetching boringssl via HTTPS in the OSX build, seeing if this helps
  # can be removed when we switch back to the upstream openssl-sys crate
  CARGO_NET_GIT_FETCH_WITH_CLI: true

jobs:
  changes:
    uses: ./.github/workflows/changes.yml
    secrets: inherit

  build-vdev:
    name: Build vdev
    runs-on: ubuntu-24.04-8core
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        name: Cache Cargo registry + index
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Build vdev
        run: cargo build --package vdev
      - name: Upload vdev binary
        uses: actions/upload-artifact@v4
        with:
          name: vdev
          path: target/debug/vdev

  check-fmt:
    name: Check code format
    runs-on: ubuntu-24.04
    needs: [changes, build-vdev]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: vdev
          path: /usr/local/bin/
      - run: chmod +x /usr/local/bin/vdev
      - run: make check-fmt
        env:
          VDEV: vdev

  check-clippy:
    name: Check clippy
    runs-on: ubuntu-24.04-8core
    if: needs.changes.outputs.source == 'true'
    needs: [changes, build-vdev]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        name: Cache Cargo registry + index
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - uses: actions/download-artifact@v4
        with:
          name: vdev
          path: /usr/local/bin/
      - run: chmod +x /usr/local/bin/vdev
      - run: sudo bash ./scripts/environment/install-protoc.sh
      - run: make check-clippy
        env:
          VDEV: vdev

  test:
    name: Unit - x86_64-unknown-linux-gnu
    runs-on: ubuntu-24.04-8core
    if: needs.changes.outputs.source == 'true'
    needs: [changes, build-vdev]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        name: Cache Cargo registry + index
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - uses: actions/download-artifact@v4
        with:
          name: vdev
          path: /usr/local/bin/
      - run: chmod +x /usr/local/bin/vdev
      - run: cargo install cargo-nextest --version 0.9.95 --force --locked
      - run: make test
        env:
          VDEV: vdev
          CARGO_BUILD_JOBS: 5

  test-component-validation:
    name: Check Component Spec
    runs-on: ubuntu-24.04
    needs: [changes, build-vdev]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        name: Cache Cargo registry + index
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - uses: actions/download-artifact@v4
        with:
          name: vdev
          path: /usr/local/bin/
      - run: chmod +x /usr/local/bin/vdev
      - run: cargo install cargo-nextest --version 0.9.95 --force --locked
      - run: make test-component-validation
        env:
          VDEV: vdev

  check-version:
    name: Check version
    runs-on: ubuntu-24.04
    needs: [changes, build-vdev]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch everything
      - uses: actions/download-artifact@v4
        with:
          name: vdev
          path: /usr/local/bin/
      - run: chmod +x /usr/local/bin/vdev
      - run: make check-version
        env:
          VDEV: vdev

  check-scripts:
    name: Check scripts
    runs-on: ubuntu-24.04
    needs: [changes, build-vdev]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: vdev
          path: /usr/local/bin/
      - run: chmod +x /usr/local/bin/vdev
      - run: sudo -E bash scripts/environment/bootstrap-ubuntu-24.04.sh
      - run: make check-scripts
        env:
          VDEV: vdev

  check-events:
    name: Check events
    runs-on: ubuntu-24.04-8core
    if: needs.changes.outputs.source == 'true'
    needs: [changes, build-vdev]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        name: Cache Cargo registry + index
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - uses: actions/download-artifact@v4
        with:
          name: vdev
          path: /usr/local/bin/
      - run: chmod +x /usr/local/bin/vdev
      - run: make check-events
        env:
          VDEV: vdev

  check-licenses:
    name: Check that the 3rd-party license file is up to date
    runs-on: ubuntu-24.04
    if: needs.changes.outputs.dependencies == 'true'
    needs: [changes, build-vdev]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        name: Cache Cargo registry + index
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - uses: actions/download-artifact@v4
        with:
          name: vdev
          path: /usr/local/bin/
      - run: chmod +x /usr/local/bin/vdev
      - run: cargo install dd-rust-license-tool --version 1.0.2 --force --locked
      - run: make check-licenses
        env:
          VDEV: vdev

  check-docs:
    name: Check Cue docs
    runs-on: ubuntu-24.04
    if: needs.changes.outputs.cue == 'true'
    needs: [changes, build-vdev]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        name: Cache Cargo registry + index
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - uses: actions/download-artifact@v4
        with:
          name: vdev
          path: /usr/local/bin/
      - run: chmod +x /usr/local/bin/vdev
      - run: make check-docs
        env:
          VDEV: vdev

  check-markdown:
    name: Check Markdown
    runs-on: ubuntu-24.04
    if: needs.changes.outputs.markdown == 'true'
    needs: [changes, build-vdev]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: vdev
          path: /usr/local/bin/
      - run: chmod +x /usr/local/bin/vdev
      - uses: ruby/setup-ruby@v1
      - run: gem install mdl
      - run: make check-markdown
        env:
          VDEV: vdev

  check-component-docs:
    name: Check Component Docs
    runs-on: ubuntu-24.04-8core
    if: needs.changes.outputs.source == 'true' || needs.changes.outputs.component_docs == 'true'
    needs: [changes, build-vdev]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        name: Cache Cargo registry + index
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - uses: actions/download-artifact@v4
        with:
          name: vdev
          path: /usr/local/bin/
      - run: chmod +x /usr/local/bin/vdev
      - run: sudo bash ./scripts/environment/install-protoc.sh
      - run: make check-component-docs
        env:
          VDEV: vdev

  check-rust-docs:
    name: Check Rust Docs
    runs-on: ubuntu-24.04-8core
    if: needs.changes.outputs.source == 'true'
    needs: [changes, build-vdev]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        name: Cache Cargo registry + index
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - uses: actions/download-artifact@v4
        with:
          name: vdev
          path: /usr/local/bin/
      - run: chmod +x /usr/local/bin/vdev
      - run: cd rust-doc && make docs
        env:
          VDEV: vdev

  test-vrl:
    name: VRL - Linux
    runs-on: ubuntu-24.04-8core
    if: needs.changes.outputs.source == 'true' || needs.changes.outputs.cue == 'true'
    needs: [changes, build-vdev]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        name: Cache Cargo registry + index
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - uses: actions/download-artifact@v4
        with:
          name: vdev
          path: /usr/local/bin/
      - run: chmod +x /usr/local/bin/vdev
      - run: sudo bash ./scripts/environment/install-protoc.sh
      - run: cargo install --force --locked --version 0.13.1 wasm-pack
      - run: make test-vrl
        env:
          VDEV: vdev

  build-vrl-playground:
    name: Build VRL Playground
    runs-on: ubuntu-24.04-8core
    if: needs.changes.outputs.source == 'true' || needs.changes.outputs.dependencies == 'true'
    needs: [changes, build-vdev]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        name: Cache Cargo registry + index
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - uses: actions/download-artifact@v4
        with:
          name: vdev
          path: /usr/local/bin/
      - run: chmod +x /usr/local/bin/vdev
      - run: cargo install --force --locked --version 0.13.1 wasm-pack
      - run: |
          cd lib/vector-vrl/web-playground/
          ~/.cargo/bin/rustup target add wasm32-unknown-unknown
          wasm-pack build --target web --out-dir public/pkg
        env:
          VDEV: vdev

  all-checks:
    name: Test Suite
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    if: always()
    needs:
      - changes
      - check-fmt
      - check-clippy
      - test
      - test-component-validation
      - check-version
      - check-scripts
      - check-events
      - check-licenses
      - check-docs
      - check-markdown
      - check-component-docs
      - check-rust-docs
      - test-vrl
      - build-vrl-playground
    env:
      FAILED: ${{ contains(needs.*.result, 'failure') }}
    steps:
      - run: |
          echo "failed=${{ env.FAILED }}"
          if [[ "$FAILED" == "true" ]] ; then
            exit 1
          else
            exit 0
          fi
