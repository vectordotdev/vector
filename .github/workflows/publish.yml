name: Publish

on:
  workflow_call:
    inputs:
      git_ref:
        type: string
        required: true
        # channel is the dir/namespace packages are organized into.
        # Options are release/nightly/custom.
      channel:
        type: string
        required: true

env:
  VERBOSE: true
  CI: true
  DISABLE_MOLD: true
  DEBIAN_FRONTEND: noninteractive
  CONTAINER_TOOL: docker
  CARGO_PROFILE_RELEASE_LTO: fat
  CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
  # observing issues fetching boringssl via HTTPS in the OSX build, seeing if this helps
  # can be removed when we switch back to the upstream openssl-sys crate
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CHANNEL: ${{ inputs.channel }}

jobs:
  generate-publish-metadata:
    name: Generate Publish-related Metadata
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    outputs:
      vector_version: ${{ steps.generate-publish-metadata.outputs.vector_version }}
      vector_build_desc: ${{ steps.generate-publish-metadata.outputs.vector_build_desc }}
      vector_release_channel: ${{ steps.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
      - name: Generate publish metadata
        id: generate-publish-metadata
        run: make ci-generate-publish-metadata

  build-x86_64-unknown-linux-musl-packages:
    name: Build Vector for x86_64-unknown-linux-musl (.tar.gz)
    runs-on: release-builder-linux
    timeout-minutes: 60
    needs: generate-publish-metadata
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
      - name: Bootstrap runner environment (Ubuntu-specific)
        run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - name: Bootstrap runner environment (generic)
        run: bash scripts/environment/prepare.sh
      - name: Build Vector
        run: make package-x86_64-unknown-linux-musl-all
      - name: Stage package artifacts for publish
        uses: actions/upload-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-musl
          path: target/artifacts/vector*

  build-x86_64-unknown-linux-gnu-packages:
    name: Build Vector for x86_64-unknown-linux-gnu (.tar.gz, DEB, RPM)
    runs-on: release-builder-linux
    needs: generate-publish-metadata
    timeout-minutes: 60
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
      - name: Bootstrap runner environment (Ubuntu-specific)
        run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - name: Bootstrap runner environment (generic)
        run: bash scripts/environment/prepare.sh
      - name: Build Vector
        run: make package-x86_64-unknown-linux-gnu-all
      - name: Stage package artifacts for publish
        uses: actions/upload-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu
          path: target/artifacts/vector*

  build-aarch64-unknown-linux-musl-packages:
    name: Build Vector for aarch64-unknown-linux-musl (.tar.gz)
    runs-on: release-builder-linux
    timeout-minutes: 60
    needs: generate-publish-metadata
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
      - name: Bootstrap runner environment (Ubuntu-specific)
        run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - name: Bootstrap runner environment (generic)
        run: bash scripts/environment/prepare.sh
      - name: Build Vector
        env:
          DOCKER_PRIVILEGED: "true"
        run: make package-aarch64-unknown-linux-musl-all
      - name: Stage package artifacts for publish
        uses: actions/upload-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-aarch64-unknown-linux-musl
          path: target/artifacts/vector*

  build-aarch64-unknown-linux-gnu-packages:
    name: Build Vector for aarch64-unknown-linux-gnu (.tar.gz)
    runs-on: release-builder-linux
    timeout-minutes: 60
    needs: generate-publish-metadata
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
      - name: Bootstrap runner environment (Ubuntu-specific)
        run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - name: Bootstrap runner environment (generic)
        run: bash scripts/environment/prepare.sh
      - name: Build Vector
        env:
          DOCKER_PRIVILEGED: "true"
        run: make package-aarch64-unknown-linux-gnu-all
      - name: Stage package artifacts for publish
        uses: actions/upload-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-aarch64-unknown-linux-gnu
          path: target/artifacts/vector*

  build-armv7-unknown-linux-gnueabihf-packages:
    name: Build Vector for armv7-unknown-linux-gnueabihf (.tar.gz)
    runs-on: release-builder-linux
    timeout-minutes: 60
    needs: generate-publish-metadata
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
      - name: Bootstrap runner environment (Ubuntu-specific)
        run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - name: Bootstrap runner environment (generic)
        run: bash scripts/environment/prepare.sh
      - name: Build Vector
        env:
          DOCKER_PRIVILEGED: "true"
        run: make package-armv7-unknown-linux-gnueabihf-all
      - name: Stage package artifacts for publish
        uses: actions/upload-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-armv7-unknown-linux-gnueabihf
          path: target/artifacts/vector*

  build-armv7-unknown-linux-musleabihf-packages:
    name: Build Vector for armv7-unknown-linux-musleabihf (.tar.gz)
    runs-on: release-builder-linux
    timeout-minutes: 60
    needs: generate-publish-metadata
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
      - name: Bootstrap runner environment (Ubuntu-specific)
        run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - name: Bootstrap runner environment (generic)
        run: bash scripts/environment/prepare.sh
      - name: Build Vector
        env:
          DOCKER_PRIVILEGED: "true"
        run: make package-armv7-unknown-linux-musleabihf
      - name: Stage package artifacts for publish
        uses: actions/upload-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-armv7-unknown-linux-musleabihf
          path: target/artifacts/vector*

  build-arm-unknown-linux-gnueabi-packages:
    name: Build Vector for arm-unknown-linux-gnueabi (.tar.gz)
    runs-on: release-builder-linux
    timeout-minutes: 60
    needs: generate-publish-metadata
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
      - name: Bootstrap runner environment (Ubuntu-specific)
        run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - name: Bootstrap runner environment (generic)
        run: bash scripts/environment/prepare.sh
      - name: Build Vector
        env:
          DOCKER_PRIVILEGED: "true"
        run: make package-arm-unknown-linux-gnueabi-all
      - name: Stage package artifacts for publish
        uses: actions/upload-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-arm-unknown-linux-gnueabi
          path: target/artifacts/vector*

  build-arm-unknown-linux-musleabi-packages:
    name: Build Vector for arm-unknown-linux-musleabi (.tar.gz)
    runs-on: release-builder-linux
    needs: generate-publish-metadata
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
      - name: Bootstrap runner environment (Ubuntu-specific)
        run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - name: Bootstrap runner environment (generic)
        run: bash scripts/environment/prepare.sh
      - name: Build Vector
        env:
          DOCKER_PRIVILEGED: "true"
        run: make package-arm-unknown-linux-musleabi
      - name: Stage package artifacts for publish
        uses: actions/upload-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-arm-unknown-linux-musleabi
          path: target/artifacts/vector*

  build-x86_64-apple-darwin-packages:
    name: Build Vector for x86_64-apple-darwin (.tar.gz)
    runs-on: macos-latest-xlarge
    timeout-minutes: 90
    needs: generate-publish-metadata
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
      - name: Bootstrap runner environment (macOS-specific)
        run: bash scripts/environment/bootstrap-macos-10.sh
      - name: Build Vector
        env:
          TARGET: "x86_64-apple-darwin"
          NATIVE_BUILD: true
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          make package
      - name: Stage package artifacts for publish
        uses: actions/upload-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-apple-darwin
          path: target/artifacts/vector*

  build-x86_64-pc-windows-msvc-packages:
    name: Build Vector for x86_64-pc-windows-msvc (.zip)
    runs-on: release-builder-windows-2022
    timeout-minutes: 90
    needs: generate-publish-metadata
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
      RUSTFLAGS: "-D warnings -Ctarget-feature=+crt-static"
      RELEASE_BUILDER: "true"
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
      - name: Bootstrap runner environment (Windows-specific)
        run: .\scripts\environment\bootstrap-windows-2022.ps1
      - name: Install Wix
        shell: bash
        run: |
          mkdir -p /c/wix
          cd /c/wix
          curl -sSfL https://github.com/wixtoolset/wix3/releases/download/wix3141rtm/wix314-binaries.zip > wix-binaries.zip
          unzip -o wix-binaries.zip
          rm wix-binaries.zip
      - name: Build Vector
        shell: bash
        run: |
          export FEATURES="default-msvc"
          export ARCHIVE_TYPE="zip"
          export KEEP_SYMBOLS="true"
          export RUST_LTO=""
          export TARGET="x86_64-pc-windows-msvc"
          export NATIVE_BUILD="true"
          make package
      - name: Build MSI package
        shell: bash
        run: |
          export PATH="/c/wix:$PATH"
          ./scripts/package-msi.sh
      - name: Stage package artifacts for publish
        uses: actions/upload-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-pc-windows-msvc
          path: target/artifacts/vector*

  deb-verify:
    name: Verify DEB Packages
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    needs:
      - generate-publish-metadata
      - build-x86_64-unknown-linux-gnu-packages
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      DD_PKG_VERSION: "latest"
      # https://github.blog/changelog/2024-03-07-github-actions-all-actions-will-run-on-node20-instead-of-node16-by-default/
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: "true"
      ACTIONS_RUNNER_FORCE_ACTIONS_NODE_VERSION: node16
    strategy:
      matrix:
        container:
          - ubuntu:16.04
          - ubuntu:18.04
          - ubuntu:20.04
          - ubuntu:22.04
          - ubuntu:23.04
          - debian:10
          - debian:11
          - debian:12
    container:
      image: ${{ matrix.container }}
    steps:
      - run: |
          apt-get update && \
          apt-get install -y \
          ca-certificates \
          curl \
          git \
          systemd \
          make
      - name: Install dd-pkg for linting
        run: |
          curl -sSL "https://dd-package-tools.s3.amazonaws.com/dd-pkg/${DD_PKG_VERSION}/dd-pkg_Linux_x86_64.tar.gz" | tar -xz -C /usr/local/bin dd-pkg
      - name: Fix Git safe directories issue when in containers (actions/checkout#760)
        run: git config --global --add safe.directory /__w/vector/vector
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Download staged package artifacts (x86_64-unknown-linux-gnu)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu
          path: target/artifacts
      - name: Verify install of DEB package.
        run: |
          ./scripts/verify-install.sh target/artifacts/vector_${{ env.VECTOR_VERSION }}-1_amd64.deb

  rpm-verify:
    name: Verify RPM Packages
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    needs:
      - generate-publish-metadata
      - build-x86_64-unknown-linux-gnu-packages
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      DD_PKG_VERSION: "latest"
      # https://github.blog/changelog/2024-03-07-github-actions-all-actions-will-run-on-node20-instead-of-node16-by-default/
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: "true"
      ACTIONS_RUNNER_FORCE_ACTIONS_NODE_VERSION: node16
    strategy:
      matrix:
        container:
          - "quay.io/centos/centos:stream9"
          - "amazonlinux:2"
          - "amazonlinux:2023"
          - "fedora:39"
          - "fedora:40"
    container:
      image: ${{ matrix.container }}
    steps:
      - run: |
          yum update -y
          yum install -y \
          ca-certificates \
          git \
          systemd \
          tar \
          make
          # conflicts with curl-minimal on some distros and --allowerased is not
          # supported on some distros
          if ! command -v curl &> /dev/null ; then
            yum install -y curl
          fi
      - name: Install dd-pkg for linting
        run: |
          curl -sSL "https://dd-package-tools.s3.amazonaws.com/dd-pkg/${DD_PKG_VERSION}/dd-pkg_Linux_x86_64.tar.gz" | tar -xz -C /usr/local/bin dd-pkg
      - name: Fix Git safe directories issue when in containers (actions/checkout#760)
        run: git config --global --add safe.directory /__w/vector/vector
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Download staged package artifacts (x86_64-unknown-linux-gnu)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu
          path: target/artifacts
      - name: Verify install of RPM package.
        run: |
          ./scripts/verify-install.sh target/artifacts/vector-${{ env.VECTOR_VERSION }}-1.x86_64.rpm

  macos-verify:
    name: Verify macOS Package
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 5
    needs:
      - generate-publish-metadata
      - build-x86_64-apple-darwin-packages
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
    strategy:
      matrix:
        runner: [macos-14, macos-15]
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
      - name: Download staged package artifacts (x86_64-apple-darwin)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-apple-darwin
          path: target/artifacts
      - name: Verify macOS package
        run: |
          tar -xvf target/artifacts/vector-${{ env.VECTOR_VERSION }}-x86_64-apple-darwin.tar.gz && vector-x86_64-apple-darwin/bin/vector --version

  publish-docker:
    name: Publish to Docker
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    needs:
      - generate-publish-metadata
      - build-aarch64-unknown-linux-gnu-packages
      - build-aarch64-unknown-linux-musl-packages
      - build-x86_64-unknown-linux-gnu-packages
      - build-x86_64-unknown-linux-musl-packages
      - build-armv7-unknown-linux-musleabihf-packages
      - build-armv7-unknown-linux-gnueabihf-packages
      - build-arm-unknown-linux-gnueabi-packages
      - build-arm-unknown-linux-musleabi-packages
      - deb-verify
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.CI_DOCKER_USERNAME }}
          password: ${{ secrets.CI_DOCKER_PASSWORD }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.2.0
        with:
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.7.1
        with:
          version: latest
          install: true
      - name: Download staged package artifacts (aarch64-unknown-linux-gnu)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-aarch64-unknown-linux-gnu
          path: target/artifacts
      - name: Download staged package artifacts (aarch64-unknown-linux-musl)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-aarch64-unknown-linux-musl
          path: target/artifacts
      - name: Download staged package artifacts (x86_64-unknown-linux-gnu)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu
          path: target/artifacts
      - name: Download staged package artifacts (x86_64-unknown-linux-musl)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-musl
          path: target/artifacts
      - name: Download staged package artifacts (armv7-unknown-linux-gnueabihf)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-armv7-unknown-linux-gnueabihf
          path: target/artifacts
      - name: Download staged package artifacts (armv7-unknown-linux-musleabihf)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-armv7-unknown-linux-musleabihf
          path: target/artifacts
      - name: Download staged package artifacts (arm-unknown-linux-gnueabi)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-arm-unknown-linux-gnueabi
          path: target/artifacts
      - name: Download staged package artifacts (arm-unknown-linux-musleabi)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-arm-unknown-linux-musleabi
          path: target/artifacts
      - name: Build and publish Docker images
        env:
          PLATFORM: "linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6"
        run: |
          make release-docker

  publish-s3:
    name: Publish to S3
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs:
      - generate-publish-metadata
      - build-x86_64-unknown-linux-gnu-packages
      - build-x86_64-unknown-linux-musl-packages
      - build-aarch64-unknown-linux-musl-packages
      - build-aarch64-unknown-linux-gnu-packages
      - build-x86_64-apple-darwin-packages
      - build-x86_64-pc-windows-msvc-packages
      - build-armv7-unknown-linux-musleabihf-packages
      - build-armv7-unknown-linux-gnueabihf-packages
      - build-arm-unknown-linux-gnueabi-packages
      - build-arm-unknown-linux-musleabi-packages
      - deb-verify
      - rpm-verify
      - macos-verify
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
      - name: Download staged package artifacts (aarch64-unknown-linux-gnu)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-aarch64-unknown-linux-gnu
          path: target/artifacts
      - name: Download staged package artifacts (aarch64-unknown-linux-musl)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-aarch64-unknown-linux-musl
          path: target/artifacts
      - name: Download staged package artifacts (x86_64-unknown-linux-gnu)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu
          path: target/artifacts
      - name: Download staged package artifacts (x86_64-unknown-linux-musl)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-musl
          path: target/artifacts
      - name: Download staged package artifacts (x86_64-apple-darwin)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-apple-darwin
          path: target/artifacts
      - name: Download staged package artifacts (x86_64-pc-windows-msvc)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-pc-windows-msvc
          path: target/artifacts
      - name: Download staged package artifacts (armv7-unknown-linux-gnueabihf)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-armv7-unknown-linux-gnueabihf
          path: target/artifacts
      - name: Download staged package artifacts (armv7-unknown-linux-musleabihf)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-armv7-unknown-linux-musleabihf
          path: target/artifacts
      - name: Download staged package artifacts (arm-unknown-linux-gnueabi)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-arm-unknown-linux-gnueabi
          path: target/artifacts
      - name: Download staged package artifacts (arm-unknown-linux-musleabi)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-arm-unknown-linux-musleabi
          path: target/artifacts
      - name: Publish artifacts to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.CI_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_AWS_SECRET_ACCESS_KEY }}
        run: make release-s3

  publish-github:
    name: Publish to GitHub
    # We only publish to GitHub for versioned releases, not nightlies.
    if: inputs.channel == 'release'
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs:
      - generate-publish-metadata
      - build-x86_64-unknown-linux-gnu-packages
      - build-x86_64-unknown-linux-musl-packages
      - build-aarch64-unknown-linux-musl-packages
      - build-aarch64-unknown-linux-gnu-packages
      - build-x86_64-apple-darwin-packages
      - build-x86_64-pc-windows-msvc-packages
      - build-armv7-unknown-linux-gnueabihf-packages
      - build-armv7-unknown-linux-musleabihf-packages
      - build-arm-unknown-linux-gnueabi-packages
      - build-arm-unknown-linux-musleabi-packages
      - deb-verify
      - rpm-verify
      - macos-verify
      - generate-sha256sum
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
      - name: Download staged package artifacts (aarch64-unknown-linux-gnu)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-aarch64-unknown-linux-gnu
          path: target/artifacts
      - name: Download staged package artifacts (aarch64-unknown-linux-musl)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-aarch64-unknown-linux-musl
          path: target/artifacts
      - name: Download staged package artifacts (x86_64-unknown-linux-gnu)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu
          path: target/artifacts
      - name: Download staged package artifacts (x86_64-unknown-linux-musl)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-musl
          path: target/artifacts
      - name: Download staged package artifacts (x86_64-apple-darwin)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-apple-darwin
          path: target/artifacts
      - name: Download staged package artifacts (x86_64-pc-windows-msvc)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-pc-windows-msvc
          path: target/artifacts
      - name: Download staged package artifacts (armv7-unknown-linux-gnueabihf)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-armv7-unknown-linux-gnueabihf
          path: target/artifacts
      - name: Download staged package artifacts (armv7-unknown-linux-musleabihf)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-armv7-unknown-linux-musleabihf
          path: target/artifacts
      - name: Download artifact checksums
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-SHA256SUMS
          path: target/artifacts
      - name: Download staged package artifacts (arm-unknown-linux-gnueabi)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-arm-unknown-linux-gnueabi
          path: target/artifacts
      - name: Download staged package artifacts (arm-unknown-linux-musleabi)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-arm-unknown-linux-musleabi
          path: target/artifacts
      - name: Publish release to GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: make release-github

  publish-homebrew:
    name: Publish to Homebrew
    # We only publish to Homebrew for versioned releases, not nightlies.
    if: inputs.channel == 'release'
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs:
      - generate-publish-metadata
      - publish-s3
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
      - name: Publish update to Homebrew tap
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PACKAGE_PUBLISHER_TOKEN }}
        run: make release-homebrew

  generate-sha256sum:
    name: Generate SHA256 checksums
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    needs:
      - generate-publish-metadata
      - build-x86_64-unknown-linux-gnu-packages
      - build-x86_64-unknown-linux-musl-packages
      - build-aarch64-unknown-linux-musl-packages
      - build-aarch64-unknown-linux-gnu-packages
      - build-x86_64-apple-darwin-packages
      - build-x86_64-pc-windows-msvc-packages
      - build-armv7-unknown-linux-gnueabihf-packages
      - build-armv7-unknown-linux-musleabihf-packages
      - build-arm-unknown-linux-gnueabi-packages
      - build-arm-unknown-linux-musleabi-packages
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
      - name: Download staged package artifacts (aarch64-unknown-linux-gnu)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-aarch64-unknown-linux-gnu
          path: target/artifacts
      - name: Download staged package artifacts (aarch64-unknown-linux-musl)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-aarch64-unknown-linux-musl
          path: target/artifacts
      - name: Download staged package artifacts (x86_64-unknown-linux-gnu)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu
          path: target/artifacts
      - name: Download staged package artifacts (x86_64-unknown-linux-musl)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-musl
          path: target/artifacts
      - name: Download staged package artifacts (x86_64-apple-darwin)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-apple-darwin
          path: target/artifacts
      - name: Download staged package artifacts (x86_64-pc-windows-msvc)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-pc-windows-msvc
          path: target/artifacts
      - name: Download staged package artifacts (armv7-unknown-linux-gnueabihf)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-armv7-unknown-linux-gnueabihf
          path: target/artifacts
      - name: Download staged package artifacts (armv7-unknown-linux-musleabihf)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-armv7-unknown-linux-musleabihf
          path: target/artifacts
      - name: Download staged package artifacts (arm-unknown-linux-gnueabi)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-arm-unknown-linux-gnueabi
          path: target/artifacts
      - name: Download staged package artifacts (arm-unknown-linux-musleabi)
        uses: actions/download-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-arm-unknown-linux-musleabi
          path: target/artifacts
      - name: Generate SHA256 checksums for artifacts
        run: make sha256sum
      - name: Stage checksum for publish
        uses: actions/upload-artifact@v4
        with:
          name: vector-${{ env.VECTOR_VERSION }}-SHA256SUMS
          path: target/artifacts/vector-${{ env.VECTOR_VERSION }}-SHA256SUMS
